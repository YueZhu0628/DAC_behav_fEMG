group_by(Section) %>%
summarise(OnlineRatingZ_diff = mean(OnlineRatingZ_diff, na.rm = TRUE),
.groups = "drop")
# wide dataframe of each
df_ra_means_diffs_10ts_v2_wide <-
df_ra_means_diffs_10ts_v2 %>%
pivot_wider(names_from = Section, values_from = OnlineRatingZ_diff, names_prefix = "OnlineRatingZ_diff_")
df_off_ra_means_de_v2 <-
df_v2_good_OFFLINERATING %>%
filter(!PID %in% excludedPIDs_v2) %>%
group_by(PID, OfflineRatingTimePoint, TrialDemand) %>%
summarise(OfflineRatingZs = mean(OfflineRatingZ, na.rm=TRUE), .groups = "drop")
df_off_ra_means_de_v2_by_demands <-
df_off_ra_means_de_v2 %>%
pivot_wider(names_from = TrialDemand, values_from = OfflineRatingZs,
names_glue = "OfflineRatingZs_{TrialDemand}") %>%
mutate(OfflineRatingZs_diff = OfflineRatingZs_easy - OfflineRatingZs_hard) %>%
mutate(DemandAversive_off = ifelse(OfflineRatingZs_diff > 0, "demand_aversive", "no_demand_aversive"))
df_off_ra_means_de_v2_by_times <-
df_off_ra_means_de_v2 %>%
pivot_wider(names_from = OfflineRatingTimePoint,
values_from = OfflineRatingZs,
names_glue = "OfflineRatingZs_{OfflineRatingTimePoint}")
df_off_ra_means_de_v2_by_demands_by_times <-
df_off_ra_means_de_v2_by_demands %>%
pivot_wider(names_from = OfflineRatingTimePoint,
values_from = c(OfflineRatingZs_easy,
OfflineRatingZs_hard,
OfflineRatingZs_diff,
DemandAversive_off),
names_glue = "{.value}_{OfflineRatingTimePoint}")
extremes_pids <-
df_off_ra_means_de_v2 %>%
group_by(OfflineRatingTimePoint, TrialDemand) %>%
filter(OfflineRatingZs == min(OfflineRatingZs) | OfflineRatingZs == max(OfflineRatingZs))
# PID 114 extreme offline ratings.
t_off_raz_diff_time_v2 <-
df_off_ra_means_de_v2_by_demands %>%
pairwise_t_test(OfflineRatingZs_diff ~ OfflineRatingTimePoint,
paired = TRUE, p.adjust.method = "bonferroni") %>%
add_significance() %>%
add_xy_position(x="OfflineRatingTimePoint")
df_v2_good_TRUECHOICE <-
df_v2_good_TRUECHOICE %>%
mutate(DemandChoice_code = ifelse(ChoiceDemand == "easy", 1, 0)) %>%
merge(df_ra_means_de_diff_v2[, c("PID", "DemandAversive")], by="PID", all.x = T)
df_v2_good_TRUECHOICE <-
df_v2_good_TRUECHOICE %>%
mutate(DemandChoice_code = ifelse(ChoiceDemand == "easy", 1, 0)) %>%
merge(df_ra_means_de_diff_v2[, c("PID", "DemandAversive_on")], by="PID", all.x = T)
df_true_dc_props_easy_by_trial_v2 <-
df_v2_good_TRUECHOICE %>%
group_by(PID) %>%
mutate(DEC_prop_true = cummean(DemandChoice_code)) %>%
mutate(DemandAvoidance_false = ifelse(DEC_prop_true > 0.5, "demand_avoid", "no_demand_avoid"))
df_true_dc_props_easy_by_trial_v2_mean <-
df_true_dc_props_easy_by_trial_v2 %>%
group_by(TrialN) %>%
summarise(DEC_prop_true_mean = mean(DEC_prop_true, na.rm = TRUE), .groups = "drop")
df_v2_good_FALSECHOICE <-
df_v2_good_FALSECHOICE %>%
mutate(DemandChoice_code = ifelse(ChoiceDemand == "easy", 1, 0)) %>%
merge(df_ra_means_de_diff_v2[, c("PID", "DemandAversive")], by = "PID", all.x = T)
df_v2_good_FALSECHOICE <-
df_v2_good_FALSECHOICE %>%
mutate(DemandChoice_code = ifelse(ChoiceDemand == "easy", 1, 0)) %>%
merge(df_ra_means_de_diff_v2[, c("PID", "DemandAversive_on")], by = "PID", all.x = T)
df_v2_good_FALSECHOICE_mean <-
df_v2_good_FALSECHOICE %>%
group_by(TrialN) %>%
summarise(DEC_parti_prop_false = mean(DemandChoice_code))
df_ra_means_de_diffs_v2 <-
df_ra_means_de_v2_wide %>%
group_by(PID, DemandAversive_on) %>%
mutate(OnlineRatingZs_diff = OnlineRatingZs_easy - OnlineRatingZs_hard) %>%
ungroup()
df_ra_means_de_diff_v2 <-
df_ra_means_de_v2 %>%
group_by(PID) %>%
summarise(
OnlineRatingZs_diff = OnlineRatingZs[TaskDemand == "easy"] - OnlineRatingZs[TaskDemand == "hard"],
DemandAversive_on = ifelse(OnlineRatingZs_diff > 0, "demand_aversive", "no_demand_aversive"),
.groups = "drop")
df_ra_means_de_v2_wide <-
df_ra_means_de_v2 %>%
pivot_wider(values_from = OnlineRatingZs, names_from = TaskDemand,
names_glue = "OnlineRatingZs_{TaskDemand}")
df_ra_means_de_diffs_v2 <-
df_ra_means_de_v2_wide %>%
group_by(PID, DemandAversive_on) %>%
mutate(OnlineRatingZs_diff = OnlineRatingZs_easy - OnlineRatingZs_hard) %>%
ungroup()
df_ra_dc_v2 <-
merge(df_ra_means_de_diffs_v2, df_ra_means_diffs_10ts_v2_wide, by="PID", all = TRUE) %>%
merge(df_true_dc_props_easy_v2, by="PID", all = TRUE) %>%
merge(df_false_dc_props_easy_v2, by="PID", all = TRUE) %>%
merge(df_false_dc_means_demands_tsecs_v2_wide, by="PID", all = TRUE)
df_true_dc_props_easy_v2 <-
df_v2_good_TRUECHOICE %>%
group_by(PID,DemandAversive_on) %>%
summarise(DEC_prop_true = mean(DemandChoice_code, na.rm=TRUE), .groups = "drop") %>%
mutate(DemandAvoidance_true = ifelse(DEC_prop_true > 0.5, "demand_avoid", "no_demand_avoid"))
df_true_dc_props_easy_v2 <-
df_v2_good_TRUECHOICE %>%
group_by(PID) %>%
summarise(DEC_prop_true = mean(DemandChoice_code, na.rm=TRUE), .groups = "drop") %>%
mutate(DemandAvoidance_true = ifelse(DEC_prop_true > 0.5, "demand_avoid", "no_demand_avoid"))
df_true_dc_props_easy_v2 <-
df_v2_good_TRUECHOICE %>%
group_by(PID,DemandAversive_on) %>%
summarise(DEC_prop_true = mean(DemandChoice_code, na.rm=TRUE), .groups = "drop") %>%
mutate(DemandAvoidance_true = ifelse(DEC_prop_true > 0.5, "demand_avoid", "no_demand_avoid"))
w_prop_true_v2_by_aversive_on <-
df_true_dc_props_easy_v2 %>%
group_by(DemandAversive_on) %>%
wilcox_test(DEC_prop_true ~ 1, mu=.5, alternative = "greater", detailed = TRUE) %>%
add_significance()
# significantly > 0.5 among aversive group
df_ra_dc_v2 <-
merge(df_ra_means_de_diffs_v2, df_ra_means_diffs_10ts_v2_wide, by="PID", all = TRUE) %>%
merge(df_true_dc_props_easy_v2, by="PID", all = TRUE) %>%
merge(df_false_dc_props_easy_v2, by="PID", all = TRUE) %>%
merge(df_false_dc_means_demands_tsecs_v2_wide, by="PID", all = TRUE)
df_false_dc_props_easy_v2 <-
df_v2_good_FALSECHOICE %>%
group_by(PID, DemandAversive_on) %>%
summarise(DEC_prop_false = mean(DemandChoice_code, na.rm=TRUE), .groups = "drop") %>%
mutate(DemandAvoidance_false = ifelse(DEC_prop_false > 0.5, "demand_avoid", "no_demand_avoid"))
df_ra_dc_v2 <-
merge(df_ra_means_de_diffs_v2, df_ra_means_diffs_10ts_v2_wide, by="PID", all = TRUE) %>%
merge(df_true_dc_props_easy_v2, by="PID", all = TRUE) %>%
merge(df_false_dc_props_easy_v2, by="PID", all = TRUE) %>%
merge(df_false_dc_means_demands_tsecs_v2_wide, by="PID", all = TRUE)
# use for correlation analysis
df_false_dc_means_demands_tsecs_v2_wide <-
df_false_dc_means_demands_tsecs_v2 %>%
select(-DemandAvoidance_false) %>%
pivot_wider(names_from = Section, values_from = DEC_prop_false, names_prefix = "DEC_prop_false_") %>%
mutate(DEC_prop_false_drop = DEC_prop_false_10 - DEC_prop_false_50) %>%
merge(df_ra_means_de_diff_v2[, c("PID", "DemandAversive")], by = "PID", all.x = T)
# use for correlation analysis
df_false_dc_means_demands_tsecs_v2_wide <-
df_false_dc_means_demands_tsecs_v2 %>%
dplyr::select(-DemandAvoidance_false) %>%
pivot_wider(names_from = Section, values_from = DEC_prop_false, names_prefix = "DEC_prop_false_") %>%
mutate(DEC_prop_false_drop = DEC_prop_false_10 - DEC_prop_false_50) %>%
merge(df_ra_means_de_diff_v2[, c("PID", "DemandAversive")], by = "PID", all.x = T)
# Create a function to calculate mean for each section of trials
calculate_section_means <- function(data, col_reps, section) {
data %>%
group_by(PID) %>%
summarise(across(starts_with(col_reps),
~ mean(.[TrialN %in% section], na.rm = TRUE),
.names = "DEC_prop_false"), .groups = "drop")
}
# Define the sections
trial_sections <- list("10" = 1:10, "20" = 11:20, "30" = 21:30, "40" = 31:40, "50" = 41:50)
# trial_sections <- list("05" = 1:5, "10" = 6:10,
#                        "15" = 11:15, "20" = 16:20,
#                        "25" = 21:25, "30" = 26:30,
#                        "35" = 31:35, "40" = 36:40,
#                        "45" = 41:45, "50" = 46:50)
# Initialize an empty list to store the results
result_list <- list()
# Use lapply to iterate over each section and calculate means
result_list <- lapply(names(trial_sections), function(section_name) {
section <- trial_sections[[section_name]]
# Calculate means for the current section
result <- calculate_section_means(df_v2_good_FALSECHOICE, "DemandChoice_code", section)
# Add a column indicating the section name
result$Section <- section_name
return(result)
})
# Combine the results into a single data frame
df_false_dc_means_demands_tsecs_v2 <-
bind_rows(result_list) %>%
mutate(DemandAvoidance_false = ifelse(DEC_prop_false > 0.5, "demand_avoid", "no_demand_avoid")) %>%
merge(df_ra_means_de_diff_v2[, c("PID", "DemandAversive")], by = "PID", all.x = T)
# Create a function to calculate mean for each section of trials
calculate_section_means <- function(data, col_reps, section) {
data %>%
group_by(PID) %>%
summarise(across(starts_with(col_reps),
~ mean(.[TrialN %in% section], na.rm = TRUE),
.names = "DEC_prop_false"), .groups = "drop")
}
# Define the sections
trial_sections <- list("10" = 1:10, "20" = 11:20, "30" = 21:30, "40" = 31:40, "50" = 41:50)
# trial_sections <- list("05" = 1:5, "10" = 6:10,
#                        "15" = 11:15, "20" = 16:20,
#                        "25" = 21:25, "30" = 26:30,
#                        "35" = 31:35, "40" = 36:40,
#                        "45" = 41:45, "50" = 46:50)
# Initialize an empty list to store the results
result_list <- list()
# Use lapply to iterate over each section and calculate means
result_list <- lapply(names(trial_sections), function(section_name) {
section <- trial_sections[[section_name]]
# Calculate means for the current section
result <- calculate_section_means(df_v2_good_FALSECHOICE, "DemandChoice_code", section)
# Add a column indicating the section name
result$Section <- section_name
return(result)
})
# Combine the results into a single data frame
df_false_dc_means_demands_tsecs_v2 <-
bind_rows(result_list) %>%
mutate(DemandAvoidance_false = ifelse(DEC_prop_false > 0.5, "demand_avoid", "no_demand_avoid")) %>%
merge(df_ra_means_de_diff_v2[, c("PID", "DemandAversive_on")], by = "PID", all.x = T)
# use for correlation analysis
df_false_dc_means_demands_tsecs_v2_wide <-
df_false_dc_means_demands_tsecs_v2 %>%
dplyr::select(-DemandAvoidance_false) %>%
pivot_wider(names_from = Section, values_from = DEC_prop_false, names_prefix = "DEC_prop_false_") %>%
mutate(DEC_prop_false_drop = DEC_prop_false_10 - DEC_prop_false_50) %>%
merge(df_ra_means_de_diff_v2[, c("PID", "DemandAversive")], by = "PID", all.x = T)
# use for correlation analysis
df_false_dc_means_demands_tsecs_v2_wide <-
df_false_dc_means_demands_tsecs_v2 %>%
dplyr::select(-DemandAvoidance_false) %>%
pivot_wider(names_from = Section, values_from = DEC_prop_false, names_prefix = "DEC_prop_false_") %>%
mutate(DEC_prop_false_drop = DEC_prop_false_10 - DEC_prop_false_50) %>%
merge(df_ra_means_de_diff_v2[, c("PID", "DemandAversive_on")], by = "PID", all.x = T)
df_false_dc_grandmeans_demands_tsecs_v2 <-
df_false_dc_means_demands_tsecs_v2 %>%
group_by(Section) %>%
summarise(DEC_prop_false_gmean = mean(DEC_prop_false, na.rm = TRUE), .groups = "drop")
no_explore_pid <-
df_false_dc_means_demands_tsecs_v2 %>%
filter(PID %in% PID[Section == 10 & DEC_prop_false == 1]) %>%
select(PID)
no_explore_pid <-
df_false_dc_means_demands_tsecs_v2 %>%
filter(PID %in% PID[Section == 10 & DEC_prop_false == 1]) %>%
dplyr::select(PID)
no_explore_pid <- unique(as.numeric(no_explore_pid$PID))
df_false_dc_means_demands_tsecs_v2_explored <-
df_false_dc_means_demands_tsecs_v2 %>%
filter(!PID %in% no_explore_pid)
df_false_dc_grandmeans_demands_tsecs_v2_explored <-
df_false_dc_means_demands_tsecs_v2_explored %>%
group_by(Section) %>%
summarise(DEC_prop_false_gmean = mean(DEC_prop_false, na.rm = TRUE), .groups = "drop")
df_false_dc_grandmeans_demands_tsecs_v2 <-
df_false_dc_means_demands_tsecs_v2 %>%
group_by(Section) %>%
summarise(DEC_prop_false_gmean = mean(DEC_prop_false, na.rm = TRUE), .groups = "drop")
df_ra_dc_v2 <-
merge(df_ra_means_de_diffs_v2, df_ra_means_diffs_10ts_v2_wide, by="PID", all = TRUE) %>%
merge(df_true_dc_props_easy_v2, by="PID", all = TRUE) %>%
merge(df_false_dc_props_easy_v2, by="PID", all = TRUE) %>%
merge(df_false_dc_means_demands_tsecs_v2_wide, by="PID", all = TRUE)
df_ra_on_off_v2 <-
merge(df_ra_means_de_diffs_v2, df_ra_means_diffs_10ts_v2_wide, by="PID", all = TRUE) %>%
merge(df_off_ra_means_de_v2_by_demands_by_times, by="PID", all = TRUE)
df_cors_v2 <-
merge(df_ra_means_de_diffs_v2, df_ra_means_diffs_10ts_v2_wide, by="PID", all=TRUE) %>%
merge(df_off_ra_means_de_v2_by_demands_by_times, by="PID", all=TRUE) %>%
merge(df_true_dc_props_easy_v2, by="PID", all=TRUE) %>%
merge(df_false_dc_props_easy_v2, by="PID", all = TRUE) %>%
merge(df_false_dc_means_demands_tsecs_v2_wide, by="PID", all = TRUE)
df_cors_pure_v2 <-
merge(df_ra_means_de_diffs_v2, df_ra_means_diffs_10ts_v2_wide, by="PID", all=TRUE) %>%
merge(df_off_ra_means_de_v2_by_demands_by_times, by="PID", all=TRUE) %>%
merge(df_true_dc_props_easy_v2, by="PID", all=TRUE) %>%
merge(df_false_dc_props_easy_v2, by="PID", all = TRUE) %>%
merge(df_false_dc_means_demands_tsecs_v2_wide, by="PID", all = TRUE) %>%
select(-c(PID, ISI, DemandAvoidance_true, DemandAvoidance_false))
df_cors_v2 <-
merge(df_ra_means_de_diffs_v2, df_ra_means_diffs_10ts_v2_wide, by="PID", all=TRUE) %>%
merge(df_off_ra_means_de_v2_by_demands_by_times, by="PID", all=TRUE) %>%
merge(df_true_dc_props_easy_v2, by="PID", all=TRUE) %>%
merge(df_false_dc_props_easy_v2, by="PID", all = TRUE) %>%
merge(df_false_dc_means_demands_tsecs_v2_wide, by="PID", all = TRUE)
df_cors_pure_v2 <-
merge(df_ra_means_de_diffs_v2, df_ra_means_diffs_10ts_v2_wide, by="PID", all=TRUE) %>%
merge(df_off_ra_means_de_v2_by_demands_by_times, by="PID", all=TRUE) %>%
merge(df_true_dc_props_easy_v2, by="PID", all=TRUE) %>%
merge(df_false_dc_props_easy_v2, by="PID", all = TRUE) %>%
merge(df_false_dc_means_demands_tsecs_v2_wide, by="PID", all = TRUE) %>%
dplyr::select(-c(PID, ISI, DemandAvoidance_true, DemandAvoidance_false))
df_cors_all_v2 <-
df_cors_v2 %>%
merge(df_ques, by="PID", all = TRUE) %>%
dplyr::select(-SONA)
main_path <- "/Users/ottolab/Desktop/Yue/DARDC_v2_Data_Analysis/data_move_here"
participants_folders <- list.dirs(main_path, full.names = TRUE, recursive = FALSE)
all_dataframes <- list()
for (p_folder in participants_folders) {
pid <- basename(p_folder)
file_path <- file.path(p_folder, paste0(pid, "_survey.csv"))
if (file.exists(file_path)){
p_data <- read.csv(file_path, header = TRUE, nrows = 1)
all_dataframes[[pid]] <- p_data
}
else{
warning(paste("File not found. SONA ID:", pid))
}
}
combined_dataframe <- do.call(rbind, all_dataframes) %>%
select(-c(success, trial_type, trial_index, time_elapsed, internal_node_id, subject))
main_path <- "/Users/ottolab/Desktop/Yue/DARDC_v2_Data_Analysis/data_move_here"
participants_folders <- list.dirs(main_path, full.names = TRUE, recursive = FALSE)
all_dataframes <- list()
for (p_folder in participants_folders) {
pid <- basename(p_folder)
file_path <- file.path(p_folder, paste0(pid, "_survey.csv"))
if (file.exists(file_path)){
p_data <- read.csv(file_path, header = TRUE, nrows = 1)
all_dataframes[[pid]] <- p_data
}
else{
warning(paste("File not found. SONA ID:", pid))
}
}
combined_dataframe <- do.call(rbind, all_dataframes) %>%
dplyr::select(-c(success, trial_type, trial_index, time_elapsed, internal_node_id, subject))
# All items
all_items <- c("^.*[0-9]+")
# BIS_BAS
bai_items <- c("^BAI.*")  # all BAI items
bai_items_reverse <- c("BAI2_bis", "BAI22_bis") # reverse items
bis_items <- c("^BAI.*bis$")  # BIS
bas_d_items <- c("^BAI.*bas_d$") # BAS drive
bas_fs_items <- c("^BAI.*bas_fs$") # BAS fun seeking
bas_rr_items <- c("^BAI.*bas_rr$") # BAS reward responsiveness
# NFC
nfc_items <- c("^NFC[0-9]+")
nfc_items_reverse <- c("NFC3", "NFC4", "NFC5", "NFC7", "NFC8", "NFC9", "NFC12", "NFC16", "NFC17")
# BFI
bfi_items <- c("BFI.*")  # all BFI items
bfi_items_reverse <- c("BFI2_agr", "BFI6_ext", "BFI12_agr", "BFI18_con", "BFI21_ext",
"BFI23_con", "BFI24_neu", "BFI27_agr", "BFI31_ext", "BFI34_neu",
"BFI35_open", "BFI37_agr", "BFI41_open", "BFI43_con")
bfi_ext_items <- c("^BFI.*ext$")  # BFI Extraversion
bfi_agr_items <- c("^BFI.*agr$")  # BFI Agreeableness
bfi_con_items <- c("^BFI.*con$")  # BFI Conscientiousness
bfi_neu_items <- c("^BFI.*neu$")  # BFI Neuroticism
bfi_open_items <- c("^BFI.*open$")  # BFI openness
# UPPS-P
upps_items <- c("^UPPS.*")  # all UPPS-P items
upps_items_reverse <- c("UPPS1_lps", "UPPS4_lps", "UPPS5_lpm", "UPPS7_lps", "UPPS12_lpm", "UPPS19_lpm")
upps_lps_items <- c("^UPPS.*lps$")  # UPPS-P Lack of Perseverance
upps_lpm_items <- c("^UPPS.*lpm$")  # UPPS-P Lack of Premeditation
upps_pu_items <- c("^UPPS.*pu$")  # UPPS-P Positive Urgency
upps_nu_items <- c("^UPPS.*nu$")  # UPPS-P Negative Urgency
rescore_items <- function(data, items){
data %>%
mutate(across(matches(items), ~ dplyr::recode(., "0" = 1L, "1" = 2L, "2" = 3L, "3" = 4L, "4" = 5L)))
}
all_items <- c("^.*[0-9]+")
combined_dataframe_rescored <-
rescore_items(combined_dataframe, all_items) %>%
dplyr::select(PID, SONA, matches(all_items))
reverse_score_items_bai <- function(data, items){
data %>%
mutate(across(items, ~ dplyr::recode(., "1" = 4L, "2" = 3L, "3" = 2L, "4" = 1L)))
}
reverse_score_items_nfc <- function(data, items){
data %>%
mutate(across(items, ~ dplyr::recode(., "1" = 5L, "2" = 4L, "3" = 3L, "4" = 2L, "5" = 1L)))
}
reverse_score_items_bfi <- function(data, items){
data %>%
mutate(across(items, ~ dplyr::recode(., "1" = 5L, "2" = 4L, "3" = 3L, "4" = 2L, "5" = 1L)))
}
reverse_score_items_upps <- function(data, items){
data %>%
mutate(across(items, ~ dplyr::recode(., "1" = 4L, "2" = 3L, "3" = 2L, "4" = 1L)))
}
# Reverse scoring
combined_dataframe_reversed <-
combined_dataframe_rescored %>%
reverse_score_items_bai(., bai_items_reverse) %>%  ## BIS_BAS
reverse_score_items_nfc(., nfc_items_reverse) %>%  ## NFC
reverse_score_items_bfi(., bfi_items_reverse) %>%  ## BFI
reverse_score_items_upps(., upps_items_reverse)  ## UPPS-P
scale_items <- function(x, na.rm = TRUE){
(x - mean(x)) / sd(x)
}
ques_items <- c(".*_sum$")
# compute sum of each subscale
df_ques <-
combined_dataframe_reversed %>%
mutate(BIS_sum = rowSums(select(., matches(bis_items)), na.rm = TRUE),
BAS_D_sum = rowSums(select(., matches(bas_d_items)), na.rm = TRUE),
BAS_FS_sum = rowSums(select(., matches(bas_fs_items)), na.rm = TRUE),
BAS_RR_sum = rowSums(select(., matches(bas_rr_items)), na.rm = TRUE),
NFC_sum = rowSums(select(., matches(nfc_items)), na.rm = TRUE),
BFI_EXT_sum = rowSums(select(., matches(bfi_ext_items)), na.rm = TRUE),
BFI_AGR_sum = rowSums(select(., matches(bfi_agr_items)), na.rm = TRUE),
BFI_CON_sum = rowSums(select(., matches(bfi_con_items)), na.rm = TRUE),
BFI_NEU_sum = rowSums(select(., matches(bfi_neu_items)), na.rm = TRUE),
BFI_OPEN_sum = rowSums(select(., matches(bfi_open_items)), na.rm = TRUE),
UPPS_LPS_sum = rowSums(select(., matches(upps_lps_items)), na.rm = TRUE),
UPPS_LPM_sum = rowSums(select(., matches(upps_lpm_items)), na.rm = TRUE),
UPPS_PU_sum = rowSums(select(., matches(upps_pu_items)), na.rm = TRUE),
UPPS_NU_sum = rowSums(select(., matches(upps_nu_items)), na.rm = TRUE)
) %>%
select(PID, SONA, matches(ques_items)) %>%
mutate(across(all_of(matches(ques_items)), ~ scale_items(.), .names ="{.col}_Z"))
ques_items <- c(".*_sum$")
# compute sum of each subscale
df_ques <-
combined_dataframe_reversed %>%
mutate(BIS_sum = rowSums(dplyr::select(., matches(bis_items)), na.rm = TRUE),
BAS_D_sum = rowSums(dplyr::select(., matches(bas_d_items)), na.rm = TRUE),
BAS_FS_sum = rowSums(dplyr::select(., matches(bas_fs_items)), na.rm = TRUE),
BAS_RR_sum = rowSums(dplyr::select(., matches(bas_rr_items)), na.rm = TRUE),
NFC_sum = rowSums(dplyr::select(., matches(nfc_items)), na.rm = TRUE),
BFI_EXT_sum = rowSums(dplyr::select(., matches(bfi_ext_items)), na.rm = TRUE),
BFI_AGR_sum = rowSums(dplyr::select(., matches(bfi_agr_items)), na.rm = TRUE),
BFI_CON_sum = rowSums(dplyr::select(., matches(bfi_con_items)), na.rm = TRUE),
BFI_NEU_sum = rowSums(dplyr::select(., matches(bfi_neu_items)), na.rm = TRUE),
BFI_OPEN_sum = rowSums(dplyr::select(., matches(bfi_open_items)), na.rm = TRUE),
UPPS_LPS_sum = rowSums(dplyr::select(., matches(upps_lps_items)), na.rm = TRUE),
UPPS_LPM_sum = rowSums(dplyr::select(., matches(upps_lpm_items)), na.rm = TRUE),
UPPS_PU_sum = rowSums(dplyr::select(., matches(upps_pu_items)), na.rm = TRUE),
UPPS_NU_sum = rowSums(dplyr::select(., matches(upps_nu_items)), na.rm = TRUE)
) %>%
select(PID, SONA, matches(ques_items)) %>%
mutate(across(all_of(matches(ques_items)), ~ scale_items(.), .names ="{.col}_Z"))
ques_items <- c(".*_sum$")
# compute sum of each subscale
df_ques <-
combined_dataframe_reversed %>%
mutate(BIS_sum = rowSums(dplyr::select(., dplyr::matches(bis_items)), na.rm = TRUE),
BAS_D_sum = rowSums(dplyr::select(., dplyr::matches(bas_d_items)), na.rm = TRUE),
BAS_FS_sum = rowSums(dplyr::select(., dplyr::matches(bas_fs_items)), na.rm = TRUE),
BAS_RR_sum = rowSums(dplyr::select(., dplyr::matches(bas_rr_items)), na.rm = TRUE),
NFC_sum = rowSums(dplyr::select(., dplyr::matches(nfc_items)), na.rm = TRUE),
BFI_EXT_sum = rowSums(dplyr::select(., dplyr::matches(bfi_ext_items)), na.rm = TRUE),
BFI_AGR_sum = rowSums(dplyr::select(., dplyr::matches(bfi_agr_items)), na.rm = TRUE),
BFI_CON_sum = rowSums(dplyr::select(., dplyr::matches(bfi_con_items)), na.rm = TRUE),
BFI_NEU_sum = rowSums(dplyr::select(., dplyr::matches(bfi_neu_items)), na.rm = TRUE),
BFI_OPEN_sum = rowSums(dplyr::select(., dplyr::matches(bfi_open_items)), na.rm = TRUE),
UPPS_LPS_sum = rowSums(dplyr::select(., dplyr::matches(upps_lps_items)), na.rm = TRUE),
UPPS_LPM_sum = rowSums(dplyr::select(., dplyr::matches(upps_lpm_items)), na.rm = TRUE),
UPPS_PU_sum = rowSums(dplyr::select(., dplyr::matches(upps_pu_items)), na.rm = TRUE),
UPPS_NU_sum = rowSums(dplyr::select(., dplyr::matches(upps_nu_items)), na.rm = TRUE)
) %>%
select(PID, SONA, matches(ques_items)) %>%
mutate(across(all_of(matches(ques_items)), ~ scale_items(.), .names ="{.col}_Z"))
ques_items <- c(".*_sum$")
# compute sum of each subscale
df_ques <-
combined_dataframe_reversed %>%
mutate(BIS_sum = rowSums(dplyr::select(., dplyr::matches(bis_items)), na.rm = TRUE),
BAS_D_sum = rowSums(dplyr::select(., dplyr::matches(bas_d_items)), na.rm = TRUE),
BAS_FS_sum = rowSums(dplyr::select(., dplyr::matches(bas_fs_items)), na.rm = TRUE),
BAS_RR_sum = rowSums(dplyr::select(., dplyr::matches(bas_rr_items)), na.rm = TRUE),
NFC_sum = rowSums(dplyr::select(., dplyr::matches(nfc_items)), na.rm = TRUE),
BFI_EXT_sum = rowSums(dplyr::select(., dplyr::matches(bfi_ext_items)), na.rm = TRUE),
BFI_AGR_sum = rowSums(dplyr::select(., dplyr::matches(bfi_agr_items)), na.rm = TRUE),
BFI_CON_sum = rowSums(dplyr::select(., dplyr::matches(bfi_con_items)), na.rm = TRUE),
BFI_NEU_sum = rowSums(dplyr::select(., dplyr::matches(bfi_neu_items)), na.rm = TRUE),
BFI_OPEN_sum = rowSums(dplyr::select(., dplyr::matches(bfi_open_items)), na.rm = TRUE),
UPPS_LPS_sum = rowSums(dplyr::select(., dplyr::matches(upps_lps_items)), na.rm = TRUE),
UPPS_LPM_sum = rowSums(dplyr::select(., dplyr::matches(upps_lpm_items)), na.rm = TRUE),
UPPS_PU_sum = rowSums(dplyr::select(., dplyr::matches(upps_pu_items)), na.rm = TRUE),
UPPS_NU_sum = rowSums(dplyr::select(., dplyr::matches(upps_nu_items)), na.rm = TRUE)
) %>%
dplyr::select(PID, SONA, matches(ques_items)) %>%
mutate(across(all_of(matches(ques_items)), ~ scale_items(.), .names ="{.col}_Z"))
df_cors_all_v2 <-
df_cors_v2 %>%
merge(df_ques, by="PID", all = TRUE) %>%
dplyr::select(-SONA)
df_v2_good_FALSECHOICE_rlddm <-
df_v2_good_FALSECHOICE_remove_outliers %>%
merge(df_cors_all_v2_pure, by.x = "PID", by.y = "PID", all.x = TRUE) %>%
dplyr::select(c(PID, ChoiceRT, ChoiceDemand, TaskDemand, TrialN,
DemandAversive_on,
DemandAversive_off_T1, DemandAversive_off_T2, DemandAversive_off_T3,
DemandAvoidance_true))
df_cors_all_v2_pure <-
df_cors_all_v2 %>%
select(-c(Gender, ISI))
df_cors_all_v2_pure <-
df_cors_all_v2 %>%
dplyr::select(-c(Gender, ISI))
df_v2_good_FALSECHOICE_logistic <-
df_v2_good_FALSECHOICE %>%
merge(df_cors_all_v2_pure, by.x = "PID", by.y = "PID", all.x = TRUE)
df_v2_good_FALSECHOICE_rlddm <-
df_v2_good_FALSECHOICE_remove_outliers %>%
merge(df_cors_all_v2_pure, by.x = "PID", by.y = "PID", all.x = TRUE) %>%
dplyr::select(c(PID, ChoiceRT, ChoiceDemand, TaskDemand, TrialN,
DemandAversive_on,
DemandAversive_off_T1, DemandAversive_off_T2, DemandAversive_off_T3,
DemandAvoidance_true))
df_v2_good_FALSECHOICE_rlddm_format <-
df_v2_good_FALSECHOICE_rlddm %>%
mutate(response = ifelse(ChoiceDemand == "easy", 0, 1),
rt = ChoiceRT, # in seconds
split_by = ifelse(ChoiceDemand == "easy", 0, 1),
feedback = ifelse(ChoiceDemand == "easy", -1, 1),
q_init = ifelse(DemandAversive_on == "demand_aversive", 0, 1)) %>%
rename(subj_idx = PID,
trial = TrialN)
write.csv(df_v2_good_FALSECHOICE_rlddm_format,
"E:/Dissertation/Methods/Exp2_Demand_Choice/DARDCpy_v2/data_analysis/rlddm/rlddm_false_choice.csv",
row.names = FALSE)
write.csv(df_v2_good_FALSECHOICE_rlddm_format,
"/Users/ottolab/Desktop/Yue/DARDC_v2_Data_Analysis/rlddm/rlddm_false_choice.csv",
row.names = FALSE)
write.csv(df_v2_good_FALSECHOICE_rlddm_format,
"/Users/ottolab/Desktop/Yue/DARDC_Modeling/rlddm/rlddm_false_choice.csv",
row.names = FALSE)
write.csv(df_v2_good_FALSECHOICE_rlddm_format,
"/Users/ottolab/Desktop/Yue/DARDC_v2_Data_Analysis/rlddm_false_choice.csv",
row.names = FALSE)
