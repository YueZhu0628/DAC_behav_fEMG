"Task_A_measure", "Task_ACC",
"Task_RT",
# "Trial_RT_log","Trial_RT_log_z",
# Learning Phase (Test) rating
"CueLearning", "TrialDemandLearning",
"cue_i_on_zyg_values", "cue_i_on_zyg_zvalues",
"cue_e_on_zyg_values", "cue_e_on_zyg_zvalues",
"cue_i_on_scr_values", "cue_i_on_scr_zvalues",
"cue_e_on_scr_values", "cue_e_on_scr_zvalues",
# True & False choice
"PhaseType",
"Choice", ## position: left or right
"ChoiceDemand", "TaskDemand", ## demand: easy or hard (middle)
"ChoiceRT",
"cue_e_true_zyg_values","cue_e_true_zyg_zvalues",
"cue_e_true_cor_values","cue_e_true_cor_zvalues",
"cue_e_true_scr_values","cue_e_true_scr_zvalues",
# Offline Rating T0, T1, T2, T3
"OfflineRatingTimePoint",
"TrialDemand", "OfflineRating", ## "OfflineRating_z",
"OfflineRatingRT",
"cue_i_off_zyg_values","cue_i_off_zyg_zvalues",
"cue_i_off_cor_values","cue_i_off_cor_zvalues",
"cue_i_off_scr_values","cue_i_off_scr_zvalues",
# Learning check T1, T2
"CueCheck", "CueDemandCheck", "CorrectAnswer",
"Answer", "AnswerDemand", "AnswerRT", "AnswerACC",
# Demand Rating
"DemandRatingQuesIndex", "QuesTLX", "DemandLevel",
"DemandRating", "DemandRatingRT",
# Questinnaires
"BAI_bis","BAI_bas_d","BAI_bas_rr","BAI_bas_fs",
"NFC",
"BFI_ext" ,"BFI_agr","BFI_con","BFI_neu","BFI_open",
"UPPS_lps","UPPS_lpm","UPPS_pu","UPPS_ss" )
# for (col in select_cols){
#   check <- col %in% colnames(p_df)
#   if (! check){
#    print(c(col, check))
#   }
# }
p_df_selected <- p_df[, select_cols]
return(p_df_selected)
}
data_folder <- "E:/Dissertation/Methods/Exp2_Demand_Choice/Analysis/Exp2_Data_Analysis/Combined_Data"
p_files <- list.files(data_folder, pattern = "csv", full.names = TRUE)
PIDS = list()
data_all = list()
for (p_file in p_files){
pid = substr(basename(p_file), 1,3)
PIDS <- append(PIDS, c(pid))
p_data <- DataInput(p_file)
data_all[[pid]] <- p_data  # R中用元素名称作为索引
}
df_all <- do.call(rbind, data_all)
df_LEARNING %>%
# group_by(PID) %>%
# summarise(Trial_RT = mean(Trial_RT, na.rm=TRUE), .groups = "drop") %>%
group_by(PID, TaskDemand) %>%
summarise(Task_RT = mean(Task_RT, na.rm=TRUE), .groups = "drop") %>%
mutate(PID = factor(PID)) %>%
ggplot(data=., aes(x=PID, y = Trial_RT,
color = TaskDemand, fill = TaskDemand)) +
geom_bar(stat = "identity", position = position_dodge(0.5)) +
scale_color_lancet()+
scale_fill_lancet(alpha = 0.5)+
labs(title = "Trial RT", x = "PID", y = "Trial RT (s)") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
df_Learning %>%
# group_by(PID) %>%
# summarise(Trial_RT = mean(Trial_RT, na.rm=TRUE), .groups = "drop") %>%
group_by(PID, TaskDemand) %>%
summarise(Task_RT = mean(Task_RT, na.rm=TRUE), .groups = "drop") %>%
mutate(PID = factor(PID)) %>%
ggplot(data=., aes(x=PID, y = Trial_RT,
color = TaskDemand, fill = TaskDemand)) +
geom_bar(stat = "identity", position = position_dodge(0.5)) +
scale_color_lancet()+
scale_fill_lancet(alpha = 0.5)+
labs(title = "Trial RT", x = "PID", y = "Trial RT (s)") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
df_Indi <-
df_all %>%
filter(Phase %in% c("Individual"))
df_Learning <-
df_all %>%
filter(Phase %in% c("LEARNING"))
df_True_Choice <-
df_all %>%
filter(Phase %in% c("TrueCHOICE"))
df_False_Choice <-
df_all %>%
filter(Phase %in% c("FalseCHOICE"))
df_Offlines <-
df_all %>%
filter(Phase == "OFFLINERATING")
# df_DemandRating <-
#   df_all %>%
#   filter(Phase == "DemandRating")
#
# df_LearningCheck <-
#   df_all %>%
#   filter(Phase == "LearningCheck")
df_Learning %>%
# group_by(PID) %>%
# summarise(Trial_RT = mean(Trial_RT, na.rm=TRUE), .groups = "drop") %>%
group_by(PID, TaskDemand) %>%
summarise(Task_RT = mean(Task_RT, na.rm=TRUE), .groups = "drop") %>%
mutate(PID = factor(PID)) %>%
ggplot(data=., aes(x=PID, y = Trial_RT,
color = TaskDemand, fill = TaskDemand)) +
geom_bar(stat = "identity", position = position_dodge(0.5)) +
scale_color_lancet()+
scale_fill_lancet(alpha = 0.5)+
labs(title = "Trial RT", x = "PID", y = "Trial RT (s)") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
df_Learning %>%
# group_by(PID) %>%
# summarise(Trial_RT = mean(Trial_RT, na.rm=TRUE), .groups = "drop") %>%
group_by(PID, TaskDemand) %>%
summarise(Task_RT = mean(Task_RT, na.rm=TRUE), .groups = "drop") %>%
mutate(PID = factor(PID)) %>%
ggplot(data=., aes(x=PID, y = Task_RT,
color = TaskDemand, fill = TaskDemand)) +
geom_bar(stat = "identity", position = position_dodge(0.5)) +
scale_color_lancet()+
scale_fill_lancet(alpha = 0.5)+
labs(title = "Trial RT", x = "PID", y = "Trial RT (s)") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
df_Learning$TaskDemand
df_clean <-
df_all %>%
filter(!PID %in% excludedPIDs_v2) %>%
group_by(PID) %>%
mutate(TaskDemand = ifelse(Phase %in% c("TrueCHOICE", "FalseCHOICE"),
TaskDemand, TrialDemandLearning),
TaskDemand = factor(TaskDemand)) %>%
# mutate(pre_RT_z = c(scale(Task_RT_pre, center = TRUE, scale = TRUE)),
#        pre_ACC = c(scale(Task_ACC_pre, center = TRUE, scale = TRUE))) %>%
ungroup()
df_clean <-
df_all %>%
# filter(!PID %in% excludedPIDs_v2) %>%
group_by(PID) %>%
mutate(TaskDemand = ifelse(Phase %in% c("TrueCHOICE", "FalseCHOICE"),
TaskDemand, TrialDemandLearning),
TaskDemand = factor(TaskDemand)) %>%
# mutate(pre_RT_z = c(scale(Task_RT_pre, center = TRUE, scale = TRUE)),
#        pre_ACC = c(scale(Task_ACC_pre, center = TRUE, scale = TRUE))) %>%
ungroup()
# write.csv(df_all_clean, na = "",
#           file = ("E:/Dissertation/Methods/Exp2_Demand_Choice/Analysis/Exp2_Data_Analysis/df_all_clean.csv")
df_clean_Indi <-
df_all %>%
filter(Phase %in% c("Individual"))
df_clean_Learning <-
df_all %>%
filter(Phase %in% c("LEARNING"))
df_clean_True_Choice <-
df_all %>%
filter(Phase %in% c("TrueCHOICE"))
df_clean_False_Choice <-
df_all %>%
filter(Phase %in% c("FalseCHOICE"))
df_clean_Offlines <-
df_all %>%
filter(Phase == "OFFLINERATING")
# df_DemandRating <-
#   df_all %>%
#   filter(Phase == "DemandRating")
#
# df_LearningCheck <-
#   df_all %>%
#   filter(Phase == "LearningCheck")
df_Indi <-
df_all_clean %>%
filter(Phase %in% c("Individual"))
df_Indi <-
df_clean %>%
filter(Phase %in% c("Individual"))
df_Learning <-
df_clean %>%
filter(Phase %in% c("LEARNING"))
df_True_Choice <-
df_clean %>%
filter(Phase %in% c("TrueCHOICE"))
df_False_Choice <-
df_clean %>%
filter(Phase %in% c("FalseCHOICE"))
df_Offlines <-
df_clean %>%
filter(Phase == "OFFLINERATING")
# df_DemandRating <-
#   df_all %>%
#   filter(Phase == "DemandRating")
#
# df_LearningCheck <-
#   df_all %>%
#   filter(Phase == "LearningCheck")
df_Learning %>%
# group_by(PID) %>%
# summarise(Trial_RT = mean(Trial_RT, na.rm=TRUE), .groups = "drop") %>%
group_by(PID, TaskDemand) %>%
summarise(Task_RT = mean(Task_RT, na.rm=TRUE), .groups = "drop") %>%
mutate(PID = factor(PID)) %>%
ggplot(data=., aes(x=PID, y = Task_RT,
color = TaskDemand, fill = TaskDemand)) +
geom_bar(stat = "identity", position = position_dodge(0.5)) +
scale_color_lancet()+
scale_fill_lancet(alpha = 0.5)+
labs(title = "Trial RT", x = "PID", y = "Trial RT (s)") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
df_Learning %>%
ggboxplot(data=., x="PID", y = "Task_RT",
color = "TaskDemand",
width = 0.7, dodge = 0) +
scale_color_lancet()+
labs(title = "Task RT", x = "PID", y = "Task RT (s)", color = "Task Demand") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
df_True_Choice <-
df_True_Choice %>%
mutate(DemandChoice_code = ifelse(ChoiceDemand == "Easy", 1, 0)) %>%
merge(df_ra_means_de_diff_v2[, c("PID", "DemandAversive_on")], by="PID", all.x = T)
df_True_Choice <-
df_True_Choice %>%
mutate(DemandChoice_code = ifelse(ChoiceDemand == "Easy", 1, 0)) %>%
merge(df_True_Choice[, c("PID", "DemandAversive_on")], by="PID", all.x = T)
df_True_Choice <-
df_True_Choice %>%
mutate(DemandChoice_code = ifelse(ChoiceDemand == "Easy", 1, 0))
df_true_dc_props_easy <-
df_True_Choice %>%
group_by(PID,DemandAversive_on) %>%
summarise(DEC_prop_true = mean(DemandChoice_code, na.rm=TRUE), .groups = "drop") %>%
mutate(DemandAvoidance_true = ifelse(DEC_prop_true > 0.5, "demand_avoid", "no_demand_avoid"))
df_true_dc_props_easy <-
df_True_Choice %>%
group_by(PID) %>%
summarise(DEC_prop_true = mean(DemandChoice_code, na.rm=TRUE), .groups = "drop") %>%
mutate(DemandAvoidance_true = ifelse(DEC_prop_true > 0.5, "demand_avoid", "no_demand_avoid"))
table(df_true_dc_props_easy_v2$DemandAvoidance_true)
table(df_true_dc_props_easy$DemandAvoidance_true)
# ggplot(df_true_dc_props_easy, aes(x="", y = DCERs_true, label=PID)) +
df_true_dc_props_easy %>%
# group_by(DemandAversive) %>%
# ggplot(data = ., aes(x=DemandAversive_on, y = DEC_prop_true)) +
ggplot(data = ., aes(x="", y = DEC_prop_true)) +
geom_boxplot(position="identity", width = 0.4) +
geom_point(aes(group = PID, color=DemandAvoidance_true),
alpha = 0.8, position = position_dodge2(width = 0.15)) +
geom_hline(aes(yintercept = 0.5, linetype = "Chance Level") ,color = "red") +
geom_hline(aes(yintercept = mean(DEC_prop_true, na.rm = TRUE), linetype = "Mean") ,color = "blue") +
scale_linetype_manual(name = "Lines", values = c(2, 2),
guide = guide_legend(override.aes = list(color = c("red", "blue"))))+
stat_boxplot(geom = "errorbar", width = 0.15) +
scale_y_continuous(limits = c(0, 1), n.breaks = 10) +
# geom_text_repel(aes(color=DemandAvoidance_true), max.overlaps = nrow(df_true_dc_props_easy)) +
scale_color_d3()+
labs(title = "Easy Choice Probability in True Choice Phase",
x="DemandAversive",
# x="",
y = "P(Easy Choice)") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(size = 5))
df_False_Choice <-
df_False_Choice %>%
mutate(DemandChoice_code = ifelse(ChoiceDemand == "Easy", 1, 0))
df_true_dc_props_false <-
df_False_Choice %>%
group_by(PID) %>%
summarise(DEC_prop_false = mean(DemandChoice_code, na.rm=TRUE), .groups = "drop") %>%
mutate(DemandAvoidance_false = ifelse(DEC_prop_true > 0.5, "demand_avoid", "no_demand_avoid"))
df_false_dc_props_easy <-
df_False_Choice %>%
group_by(PID) %>%
summarise(DEC_prop_false = mean(DemandChoice_code, na.rm=TRUE), .groups = "drop") %>%
mutate(DemandAvoidance_false = ifelse(DEC_prop_false > 0.5, "demand_avoid", "no_demand_avoid"))
table(df_false_dc_props_easy$DemandAvoidance_false)
# ggplot(df_true_dc_props_easy, aes(x="", y = DCERs_true, label=PID)) +
df_false_dc_props_easy %>%
# group_by(DemandAversive) %>%
# ggplot(data = ., aes(x=DemandAversive_on, y = DEC_prop_true)) +
ggplot(data = ., aes(x="", y = DEC_prop_false)) +
geom_boxplot(position="identity", width = 0.4) +
geom_point(aes(group = PID, color=DemandAvoidance_false),
alpha = 0.8, position = position_dodge2(width = 0.15)) +
geom_hline(aes(yintercept = 0.5, linetype = "Chance Level") ,color = "red") +
geom_hline(aes(yintercept = mean(DEC_prop_false, na.rm = TRUE), linetype = "Mean") ,color = "blue") +
scale_linetype_manual(name = "Lines", values = c(2, 2),
guide = guide_legend(override.aes = list(color = c("red", "blue"))))+
stat_boxplot(geom = "errorbar", width = 0.15) +
scale_y_continuous(limits = c(0, 1), n.breaks = 10) +
# geom_text_repel(aes(color=DemandAvoidance_true), max.overlaps = nrow(df_true_dc_props_easy)) +
scale_color_d3()+
labs(title = "Easy Choice Probability in False Choice Phase",
x="DemandAversive",
# x="",
y = "P(Easy Choice)") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(size = 5))
colnames(df_Learning)
df_Learning %>%
group_by(PID) %>%
summarise(zyg_z = mean(cue_i_on_zyg_zvalues, ra.rm = TRUE)) %>%
ggplot(aes(x = zyg_z)) +
geom_histogram(position = position_dodge(width = 0.6), bins = 5, alpha = 0.8)+
# scale_x_continuous(limits = c(-1, 1)) +
labs(title = "Rating Means of participants", x = "Ratings(z-scored)", y = "Counts") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
df_Learning %>%
group_by(PID) %>%
summarise(zyg_z = mean(cue_i_on_zyg_zvalues, ra.rm = TRUE))
df_Learning$cue_i_on_zyg_zvalues
df_Learning %>%
group_by(PID) %>%
summarise(zyg_z = mean(cue_i_on_zyg_zvalues, ra.rm = TRUE)) %>%
ggplot(aes(x = zyg_z)) +
geom_histogram()+
# scale_x_continuous(limits = c(-1, 1)) +
labs(title = "fEMG response Means of participants", x = "Ratings(z-scored)", y = "Counts") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
df_Learning %>%
group_by(PID) %>%
summarise(zyg_z = mean(cue_i_on_zyg_zvalues, na.rm = TRUE)) %>%
ggplot(aes(x = zyg_z)) +
geom_histogram(position = position_dodge(width = 0.6), bins = 5, alpha = 0.8)+
# scale_x_continuous(limits = c(-1, 1)) +
labs(title = "fEMG response Means of participants", x = "Ratings(z-scored)", y = "Counts") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
df_Learning %>%
group_by(PID) %>%
summarise(zyg_z = mean(cue_i_on_zyg_zvalues, na.rm = TRUE)) %>%
ggplot(aes(x = zyg_z)) +
geom_histogram(position = position_dodge(width = 0.4), bins = 5, alpha = 0.8)+
# scale_x_continuous(limits = c(-1, 1)) +
labs(title = "fEMG response Means of participants", x = "Ratings(z-scored)", y = "Counts") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
df_Learning %>%
group_by(PID) %>%
summarise(zyg_z = mean(cue_i_on_zyg_zvalues, na.rm = TRUE)) %>%
ggplot(aes(x = zyg_z)) +
geom_histogram(position = position_dodge(width = 0.3), bins = 5, alpha = 0.8)+
# scale_x_continuous(limits = c(-1, 1)) +
labs(title = "fEMG response Means of participants", x = "Ratings(z-scored)", y = "Counts") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
df_Learning %>%
group_by(PID) %>%
summarise(zyg_z = mean(cue_i_on_zyg_zvalues, na.rm = TRUE)) %>%
ggplot(aes(x = zyg_z)) +
geom_histogram(position = position_dodge(width = 0.3), bins = 5, alpha = 0.8)+
# scale_x_continuous(limits = c(-1, 1)) +
labs(title = "fEMG response Means of participants", x = "fEMG values (z-scored)", y = "Counts") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
df_learning %>%
group_by(PID, TaskDemand) %>%
summarise(zyg_z = mean(cue_i_on_zyg_zvalues, ra.rm = TRUE), .groups = "drop") %>%
ggplot(aes(x = zyg_z, color  = TaskDemand, fill = TaskDemand)) +
geom_histogram(position = position_dodge(width = 0.25), bins = 10, alpha = 0.7)+
# scale_x_continuous(breaks = seq(-5, 5)) +
scale_color_lancet() +
scale_fill_lancet() +
labs(title = "fEMG response Means of participants", x = "fEMG values (z-scored)", y = "Counts", fill = "Task Demand") +
guides(color = "none") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
df_Learning %>%
group_by(PID, TaskDemand) %>%
summarise(zyg_z = mean(cue_i_on_zyg_zvalues, ra.rm = TRUE), .groups = "drop") %>%
ggplot(aes(x = zyg_z, color  = TaskDemand, fill = TaskDemand)) +
geom_histogram(position = position_dodge(width = 0.25), bins = 10, alpha = 0.7)+
# scale_x_continuous(breaks = seq(-5, 5)) +
scale_color_lancet() +
scale_fill_lancet() +
labs(title = "fEMG response Means of participants", x = "fEMG values (z-scored)", y = "Counts", fill = "Task Demand") +
guides(color = "none") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
df_Learning %>%
group_by(PID, TaskDemand) %>%
summarise(zyg_z = mean(cue_i_on_zyg_zvalues, na.rm = TRUE), .groups = "drop") %>%
ggplot(aes(x = zyg_z, color  = TaskDemand, fill = TaskDemand)) +
geom_histogram(position = position_dodge(width = 0.25), bins = 10, alpha = 0.7)+
# scale_x_continuous(breaks = seq(-5, 5)) +
scale_color_lancet() +
scale_fill_lancet() +
labs(title = "fEMG response Means of participants", x = "fEMG values (z-scored)", y = "Counts", fill = "Task Demand") +
guides(color = "none") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
df_Learning %>%
group_by(PID, TaskDemand) %>%
summarise(cor_z = mean(cor_i_on_zyg_zvalues, na.rm = TRUE), .groups = "drop") %>%
ggplot(aes(x = cor_z, color  = TaskDemand, fill = TaskDemand)) +
geom_histogram(position = position_dodge(width = 0.25), bins = 10, alpha = 0.7)+
# scale_x_continuous(breaks = seq(-5, 5)) +
scale_color_lancet() +
scale_fill_lancet() +
labs(title = "fEMG response Means of participants", x = "fEMG values (z-scored)", y = "Counts", fill = "Task Demand") +
guides(color = "none") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
df_Learning %>%
group_by(PID, TaskDemand) %>%
summarise(cor_z = mean(cue_i_on_cor_zvalues, na.rm = TRUE), .groups = "drop") %>%
ggplot(aes(x = cor_z, color  = TaskDemand, fill = TaskDemand)) +
geom_histogram(position = position_dodge(width = 0.25), bins = 10, alpha = 0.7)+
# scale_x_continuous(breaks = seq(-5, 5)) +
scale_color_lancet() +
scale_fill_lancet() +
labs(title = "fEMG response Means of participants", x = "fEMG values (z-scored)", y = "Counts", fill = "Task Demand") +
guides(color = "none") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
df_True_Choice %>%
group_by(PID, TaskDemand) %>%
summarise(cor_z = mean(cue_e_true_cor_zvalues, na.rm = TRUE), .groups = "drop") %>%
ggplot(aes(x = cor_z, color  = TaskDemand, fill = TaskDemand)) +
geom_histogram(position = position_dodge(width = 0.25), bins = 10, alpha = 0.7)+
# scale_x_continuous(breaks = seq(-5, 5)) +
scale_color_lancet() +
scale_fill_lancet() +
labs(title = "fEMG response Means of participants", x = "fEMG values (z-scored)", y = "Counts", fill = "Task Demand") +
guides(color = "none") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
df_False_Choice %>%
group_by(PID, TaskDemand) %>%
summarise(cor_z = mean(cue_e_false_cor_zvalues, na.rm = TRUE), .groups = "drop") %>%
ggplot(aes(x = cor_z, color  = TaskDemand, fill = TaskDemand)) +
geom_histogram(position = position_dodge(width = 0.25), bins = 10, alpha = 0.7)+
# scale_x_continuous(breaks = seq(-5, 5)) +
scale_color_lancet() +
scale_fill_lancet() +
labs(title = "fEMG response Means of participants", x = "fEMG values (z-scored)", y = "Counts", fill = "Task Demand") +
guides(color = "none") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
df_False_Choice %>%
group_by(PID, ChoiceDemand) %>%
summarise(cor_z = mean(cue_e_false_cor_zvalues, na.rm = TRUE), .groups = "drop") %>%
ggplot(aes(x = cor_z, color  = ChoiceDemand, fill = ChoiceDemand)) +
geom_histogram(position = position_dodge(width = 0.25), bins = 10, alpha = 0.7)+
# scale_x_continuous(breaks = seq(-5, 5)) +
scale_color_lancet() +
scale_fill_lancet() +
labs(title = "fEMG response Means of participants", x = "fEMG values (z-scored)", y = "Counts", fill = "Choice Demand") +
guides(color = "none") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
colnames(df_False_Choice)
df_True_Choice %>%
group_by(PID, TaskDemand) %>%
summarise(zyg_z = mean(cue_e_true_zyg_zvalues, na.rm = TRUE), .groups = "drop") %>%
ggplot(aes(x = zyg_z, color  = TaskDemand, fill = TaskDemand)) +
geom_histogram(position = position_dodge(width = 0.25), bins = 10, alpha = 0.7)+
# scale_x_continuous(breaks = seq(-5, 5)) +
scale_color_lancet() +
scale_fill_lancet() +
labs(title = "fEMG response Means of participants", x = "fEMG values (z-scored)", y = "Counts", fill = "Task Demand") +
guides(color = "none") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
df_Learning %>%
group_by(PID, TaskDemand) %>%
summarise(zyg_z = mean(cue_e_on_zyg_zvalues, na.rm = TRUE), .groups = "drop") %>%
ggplot(aes(x = zyg_z, color  = TaskDemand, fill = TaskDemand)) +
geom_histogram(position = position_dodge(width = 0.25), bins = 10, alpha = 0.7)+
# scale_x_continuous(breaks = seq(-5, 5)) +
scale_color_lancet() +
scale_fill_lancet() +
labs(title = "fEMG response Means of participants", x = "fEMG values (z-scored)", y = "Counts", fill = "Task Demand") +
guides(color = "none") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
df_Learning %>%
group_by(PID, TaskDemand) %>%
summarise(zyg_z = mean(cue_e_on_zyg_zvalues, na.rm = TRUE), .groups = "drop") %>%
ggplot(aes(x = zyg_z, color  = TaskDemand, fill = TaskDemand)) +
geom_histogram(position = position_dodge(width = 0.45), bins = 10, alpha = 0.7)+
# scale_x_continuous(breaks = seq(-5, 5)) +
scale_color_lancet() +
scale_fill_lancet() +
labs(title = "fEMG response Means of participants", x = "fEMG values (z-scored)", y = "Counts", fill = "Task Demand") +
guides(color = "none") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
df_Learning %>%
group_by(PID, TaskDemand) %>%
summarise(zyg_z = mean(cue_e_on_zyg_zvalues, na.rm = TRUE), .groups = "drop") %>%
ggplot(aes(x = zyg_z, color  = TaskDemand, fill = TaskDemand)) +
geom_histogram(position = position_dodge(width = 0.5), bins = 10, alpha = 0.7)+
# scale_x_continuous(breaks = seq(-5, 5)) +
scale_color_lancet() +
scale_fill_lancet() +
labs(title = "fEMG response Means of participants", x = "fEMG values (z-scored)", y = "Counts", fill = "Task Demand") +
guides(color = "none") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
