color = "Demand Level") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
df_dr_means_de <-
df_DemandRating %>%
group_by(PID, DemandLevel) %>%
summarise(DemandRating = mean(DemandRating, na.rm=TRUE),
DemandRating_z = mean(DemandRating_z, na.rm=TRUE),
.groups = "drop") %>%
mutate(DemandLevel=factor(DemandLevel))
t_dr <-
df_dr_means_de %>%
t_test(DemandRating_z ~ DemandLevel, paired = TRUE, detailed = TRUE) %>%
add_xy_position(x = "DemandLevel") %>%
add_significance()
ggplot(data = df_dr_means_de, aes(x = DemandLevel, y = DemandRating_z,
color = DemandLevel)) +
geom_boxplot(width = 0.5, alpha = 0.7) +
geom_jitter() +
stat_boxplot(geom = "errorbar", width = 0.15) +
# stat_pvalue_manual(t_dr, y = 105, step.increase = 0.2,
#                    label = "p = {p}{p.adj.signif}", hide.ns = TRUE) +
# scale_color_manual(labels=c("1-Back", "2-Back", "3-Back"),
#                    values = c("#00468BFF", "#42B540FF", "#ED0000FF")) +
# scale_x_discrete(labels = c("1-Back", "2-Back", "3-Back")) +
labs(title = "Demand Rating t-test", x = "Task Demand", y = "Demand Rating_z",
color = "Demand Level") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = df_dr_means_de, aes(x = DemandLevel, y = DemandRating_z,
color = DemandLevel)) +
geom_boxplot(width = 0.5, alpha = 0.7) +
geom_jitter() +
stat_boxplot(geom = "errorbar", width = 0.15) +
stat_pvalue_manual(t_dr, y = 105, step.increase = 0.2,
label = "p = {p}{p.adj.signif}", hide.ns = TRUE) +
scale_color_manual(labels=c("1-Back", "2-Back", "3-Back"),
values = c("#00468BFF", "#42B540FF", "#ED0000FF")) +
scale_x_discrete(labels = c("1-Back", "2-Back", "3-Back")) +
labs(title = "Demand Rating t-test", x = "Task Demand", y = "Demand Rating_z",
color = "Demand Level") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = df_dr_means_de, aes(x = DemandLevel, y = DemandRating_z,
color = DemandLevel)) +
geom_boxplot(width = 0.5, alpha = 0.7) +
geom_jitter() +
stat_boxplot(geom = "errorbar", width = 0.15) +
stat_pvalue_manual(t_dr, y = 1, step.increase = 0.2,
label = "p = {p}{p.adj.signif}", hide.ns = TRUE) +
scale_color_manual(labels=c("1-Back", "2-Back", "3-Back"),
values = c("#00468BFF", "#42B540FF", "#ED0000FF")) +
scale_x_discrete(labels = c("1-Back", "2-Back", "3-Back")) +
labs(title = "Demand Rating t-test", x = "Task Demand", y = "Demand Rating_z",
color = "Demand Level") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = df_dr_means_de, aes(x = DemandLevel, y = DemandRating_z,
color = DemandLevel)) +
geom_boxplot(width = 0.5, alpha = 0.7) +
geom_jitter() +
stat_boxplot(geom = "errorbar", width = 0.15) +
stat_pvalue_manual(t_dr, step.increase = 0.2, bracket.nudge.y = 0.1,
label = "p = {p}{p.adj.signif}", hide.ns = TRUE) +
scale_color_manual(labels=c("1-Back", "2-Back", "3-Back"),
values = c("#00468BFF", "#42B540FF", "#ED0000FF")) +
scale_x_discrete(labels = c("1-Back", "2-Back", "3-Back")) +
labs(title = "Demand Rating t-test", x = "Task Demand", y = "Demand Rating_z",
color = "Demand Level") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
df_dr_means_de_diff <-
df_dr_means_de %>%
select(-DR_aves) %>%
pivot_wider(names_from = DemandLevel,
names_prefix = "DemandRating_z_" ,values_from = DemandRating_z) %>%
group_by(PID) %>%
mutate(DemandRating_z_diff = DemandRating_z_3 -DemandRating_z_1) %>%
ungroup() %>%
mutate(DemandCheckType = ifelse(DemandRating_z_diff > 0, "3_as_harder", "1_as_harder"))
df_dr_means_de_diff <-
df_dr_means_de %>%
select(-DemandRating) %>%
pivot_wider(names_from = DemandLevel,
names_prefix = "DemandRating_z_" ,values_from = DemandRating_z) %>%
group_by(PID) %>%
mutate(DemandRating_z_diff = DemandRating_z_3 -DemandRating_z_1) %>%
ungroup() %>%
mutate(DemandCheckType = ifelse(DemandRating_z_diff > 0, "3_as_harder", "1_as_harder"))
# ggplot(data = df_dr_means_de_diff, aes(x="", y = DR_aveZs_diff, color=DemandCheckType, label=PID)) +
ggplot(data = df_dr_means_de_diff, aes(x="", y = DemandRating_z_diff, color=DemandLevel)) +
geom_boxplot(position="identity", width = 0.2, alpha = 0.9) +
geom_jitter(width = 0.2) +
# geom_label_repel(aes(color=DemandCheckType), max.overlaps = nrow(df_dr_means_de_diff)) +
scale_color_d3()+
labs(title = "DemandRating_diff (hard-easy)", x = "", y = "DemandRating_Z_diff") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
df_dr_means_de_diff <-
df_dr_means_de %>%
select(-DemandRating) %>%
pivot_wider(names_from = DemandLevel,
names_prefix = "DemandRating_z_" ,values_from = DemandRating_z) %>%
group_by(PID) %>%
mutate(DemandRating_z_diff = DemandRating_z_3 -DemandRating_z_1) %>%
ungroup() %>%
mutate(DemandCheckType = ifelse(DemandRating_z_diff > 0, "3_as_harder", "1_as_harder"))
# ggplot(data = df_dr_means_de_diff, aes(x="", y = DR_aveZs_diff, color=DemandCheckType, label=PID)) +
ggplot(data = df_dr_means_de_diff, aes(x="", y = DemandRating_z_diff, color=DemandCheckType)) +
geom_boxplot(position="identity", width = 0.2, alpha = 0.9) +
geom_jitter(width = 0.2) +
# geom_label_repel(aes(color=DemandCheckType), max.overlaps = nrow(df_dr_means_de_diff)) +
scale_color_d3()+
labs(title = "DemandRating_diff (hard-easy)", x = "", y = "DemandRating_Z_diff") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
df_dr_means_de_diff <-
df_dr_means_de %>%
select(-DemandRating) %>%
pivot_wider(names_from = DemandLevel,
names_prefix = "DemandRating_z_" ,values_from = DemandRating_z) %>%
group_by(PID) %>%
mutate(DemandRating_z_diff = DemandRating_z_3 -DemandRating_z_1) %>%
ungroup() %>%
mutate(DemandCheckType = ifelse(DemandRating_z_diff > 0, "3_as_harder", "1_as_harder"))
# ggplot(data = df_dr_means_de_diff, aes(x="", y = DR_aveZs_diff, color=DemandCheckType, label=PID)) +
ggplot(data = df_dr_means_de_diff, aes(x="", y = DemandRating_z_diff, color=DemandCheckType)) +
geom_boxplot(position="identity", width = 0.2, alpha = 0.9) +
geom_jitter(width = 0.2) +
geom_label_repel(aes(color=DemandCheckType), max.overlaps = nrow(df_dr_means_de_diff)) +
scale_color_d3()+
labs(title = "DemandRating_diff (hard-easy)", x = "", y = "DemandRating_Z_diff") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
df_dr_means_de_diff <-
df_dr_means_de %>%
select(-DemandRating) %>%
pivot_wider(names_from = DemandLevel,
names_prefix = "DemandRating_z_" ,values_from = DemandRating_z) %>%
group_by(PID) %>%
mutate(DemandRating_z_diff = DemandRating_z_3 -DemandRating_z_1) %>%
ungroup() %>%
mutate(DemandCheckType = ifelse(DemandRating_z_diff > 0, "3_as_harder", "1_as_harder"))
ggplot(data = df_dr_means_de_diff, aes(x="", y = DR_aveZs_diff, color=DemandCheckType, label=PID)) +
# ggplot(data = df_dr_means_de_diff, aes(x="", y = DemandRating_z_diff, color=DemandCheckType)) +
geom_boxplot(position="identity", width = 0.2, alpha = 0.9) +
geom_jitter(width = 0.2) +
geom_label_repel(aes(color=DemandCheckType), max.overlaps = nrow(df_dr_means_de_diff)) +
scale_color_d3()+
labs(title = "DemandRating_diff (hard-easy)", x = "", y = "DemandRating_Z_diff") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
df_dr_means_de_diff <-
df_dr_means_de %>%
select(-DemandRating) %>%
pivot_wider(names_from = DemandLevel,
names_prefix = "DemandRating_z_" ,values_from = DemandRating_z) %>%
group_by(PID) %>%
mutate(DemandRating_z_diff = DemandRating_z_3 -DemandRating_z_1) %>%
ungroup() %>%
mutate(DemandCheckType = ifelse(DemandRating_z_diff > 0, "3_as_harder", "1_as_harder"))
ggplot(data = df_dr_means_de_diff, aes(x="", y = DemandRating_z_diff, color=DemandCheckType, label=PID)) +
# ggplot(data = df_dr_means_de_diff, aes(x="", y = DemandRating_z_diff, color=DemandCheckType)) +
geom_boxplot(position="identity", width = 0.2, alpha = 0.9) +
geom_jitter(width = 0.2) +
geom_label_repel(aes(color=DemandCheckType), max.overlaps = nrow(df_dr_means_de_diff)) +
scale_color_d3()+
labs(title = "DemandRating_diff (hard-easy)", x = "", y = "DemandRating_Z_diff") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
rm(list = ls())
getwd()
setwd("E:/Dissertation/Methods/Exp2_Demand_Choice/Analysis/Exp2_Data_Analysis")
# getwd()
library(dplyr)
library(tidyr)
library(rstatix)
library(psych)
# library(lattice)
library(ggplot2)
library(ggrepel)
library(ggpubr)
library(ggsci)
library(sjPlot)
# library(ggeffects)
# library(webshot)
library(ez)
library(BayesFactor)
library(lme4)
# library(blme)
library(lmerTest)
# library(emmeans)
# library(afex)
# library(performance) # check for assumptions of statistical analyses
# library(grid)
# library(mediation)
DataInput <- function(p_comb_data_file){
p_df <- read.csv(p_comb_data_file)
# print(colnames(p_df))
select_cols <- c("PID", "Gender", "Age", "CueMapping",
# Procedure Info
"Phase", "Block", "TrialN", "NbackLevel", "ISI",
# Calibration Info
"ISI_calibrated", "CaliEnd_A_measure",
# Trial Performance
"Task_A_measure", "Task_ACC",
"Task_RT", "Task_RT_z",
# Learning Phase (Test) rating
"CueLearning", "TrialDemandLearning",
"cue_i_on_zyg_values", "cue_i_on_zyg_zvalues",
"cue_e_on_zyg_values", "cue_e_on_zyg_zvalues",
"cue_i_on_cor_values", "cue_i_on_cor_zvalues",
"cue_e_on_cor_values", "cue_e_on_cor_zvalues",
"cue_i_on_scr_values", "cue_i_on_scr_zvalues",
"cue_e_on_scr_values", "cue_e_on_scr_zvalues",
# True & False choice
"PhaseType",
"Choice", ## position: left or right
"ChoiceDemand", "TaskDemand", ## demand: easy or hard (middle)
"ChoiceRT",
"cue_e_true_zyg_values","cue_e_true_zyg_zvalues",
"cue_e_true_cor_values","cue_e_true_cor_zvalues",
"cue_e_true_scr_values","cue_e_true_scr_zvalues",
"cue_e_false_zyg_values","cue_e_false_zyg_zvalues",
"cue_e_false_cor_values","cue_e_false_cor_zvalues",
"cue_e_false_scr_values","cue_e_false_scr_zvalues",
# Offline Rating T0, T1, T2, T3
"OfflineRatingTimePoint",
"TrialDemand", ## demand the cue associated before
"OfflineRating", "OfflineRating_z",
"OfflineRatingRT",
"cue_i_off_zyg_values","cue_i_off_zyg_zvalues",
"cue_i_off_cor_values","cue_i_off_cor_zvalues",
"cue_i_off_scr_values","cue_i_off_scr_zvalues",
# Learning check T1, T2
"CueCheck", "CueDemandCheck", "CorrectAnswer",
"Answer", "AnswerDemand", "AnswerRT", "AnswerACC",
# Demand Rating
"DemandRatingQuesIndex", "QuesTLX", "DemandLevel",
"DemandRating","DemandRating_z", "DemandRatingRT",
# Questionnaires
"BAI_bis","BAI_bas_d","BAI_bas_rr","BAI_bas_fs",
"NFC",
"BFI_ext" ,"BFI_agr","BFI_con","BFI_neu","BFI_open",
"UPPS_lps","UPPS_lpm","UPPS_pu","UPPS_ss" )
# for (col in select_cols){
#   check <- col %in% colnames(p_df)
#   if (! check){
#    print(c(col, check))
#   }
# }
p_df_selected <- p_df[, select_cols]
return(p_df_selected)
}
data_folder <- "E:/Dissertation/Methods/Exp2_Demand_Choice/Analysis/Exp2_Data_Analysis/Combined_Data"
p_files <- list.files(data_folder, pattern = "csv", full.names = TRUE)
PIDS = list()
data_all = list()
for (p_file in p_files){
pid = substr(basename(p_file), 1,3)
PIDS <- append(PIDS, c(pid))
p_data <- DataInput(p_file)
data_all[[pid]] <- p_data  # R中用元素名称作为索引
}
df_all <- do.call(rbind, data_all)
# check for participants who didn't learned the association
df_LearningCheck <-
df_all %>%
filter(Phase == "LEARNINGCHECK")
failedLearningPIDs <-
df_LearningCheck$PID[df_LearningCheck$AnswerACC==0] %>%
unique()
failedLearningPIDs
excludedPIDs <- failedLearningPIDs
# add the excluded PIDs due to some other problems
# PID 8 chose easy all the time
excludedPIDs <-
c(failedLearningPIDs,8)
df_clean <-
df_all %>%
filter(!PID %in% excludedPIDs) %>%
group_by(PID) %>%
mutate(TaskDemand = ifelse(Phase %in% c("TrueCHOICE", "FalseCHOICE"),
TaskDemand, TrialDemandLearning),
TaskDemand = factor(TaskDemand)) %>%
# mutate(TrialDemandLearning_code = ifelse(TrialDemandLearning=="Easy",0,1),
#        TaskDemand_code = ifelse(TaskDemand=="Easy",0,ifelse(TaskDemand=="Hard",1,2))) %>%
# mutate(pre_RT_z = c(scale(Task_RT_pre, center = TRUE, scale = TRUE)),
#        pre_ACC = c(scale(Task_ACC_pre, center = TRUE, scale = TRUE))) %>%
ungroup()
# write.csv(df_all_clean, na = "",
#           file = ("E:/Dissertation/Methods/Exp2_Demand_Choice/Analysis/Exp2_Data_Analysis/df_all_clean.csv")
df_Indi <-
df_clean %>%
filter(Phase %in% c("PRACTICE"))
df_Learning <-
df_clean %>%
filter(Phase %in% c("LEARNING"))
df_True_Choice <-
df_clean %>%
filter(Phase %in% c("TrueCHOICE"))
df_False_Choice <-
df_clean %>%
filter(Phase %in% c("FalseCHOICE"))
df_Offlines <-
df_clean %>%
filter(Phase == "OFFLINERATING")
df_DemandRating <-
df_clean %>%
filter(Phase == "DEMANDRATING")
df_Indi %>%
ggplot(aes(x=factor(sort(ISI))))+
geom_bar(position = position_dodge(width = 0.7) ,
width = 0.6, alpha=0.6, fill="darkgreen")+
labs(title = "Calibrated ISI", x = "ISI") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
indi_hist_plot <- function(df_clean, indicator, gb=NA){
if(!is.na(gb)){
df_clean %>%
filter(Phase %in% c("LEARNING","TrueCHOICE","FalseCHOICE")) %>%
group_by(!!sym(gb)) %>%
mutate(indi_mean = mean(!!sym(indicator), na.rm=TRUE)) %>%
ggplot(aes(!!sym(indicator),
color = .data[[gb]], fill = .data[[gb]])) +
geom_histogram()+
scale_color_lancet()+
scale_fill_lancet(alpha = 0.5)+
geom_vline(aes(xintercept=indi_mean))+
facet_wrap(~.data[[gb]])+
labs(title = indicator, x = indicator)
}else{
df_clean %>%
filter(Phase %in% c("LEARNING","TrueCHOICE","FalseCHOICE")) %>%
mutate(indi_mean = mean(!!sym(indicator), na.rm=TRUE)) %>%
ggplot(aes(!!sym(indicator))) +
geom_histogram()+
geom_vline(aes(xintercept=indi_mean))+
labs(title = indicator, x = indicator)
}
}
t_test_within <- function(df_clean, indicator, gb){
t_ds <-
df_clean %>%
filter(Phase %in% c("LEARNING","TrueCHOICE","FalseCHOICE")) %>%
group_by(PID) %>%
t_test(!!sym(indicator)~!!sym(gb))
}
indi_bar_plot <- function(df_clean, indicator, gb, demands=TRUE){
if(demands == FALSE){
df <-
df_clean %>%
filter(Phase %in% c("LEARNING","TrueCHOICE","FalseCHOICE")) %>%
group_by(PID) %>%
summarise(indi_mean = mean(!!sym(indicator), na.rm=TRUE), .groups = "drop")
}else{
df <-
df_clean %>%
filter(Phase %in% c("LEARNING","TrueCHOICE","FalseCHOICE")) %>%
group_by(PID, !!sym(gb)) %>%
summarise(indi_mean = mean(!!sym(indicator), na.rm=TRUE), .groups = "drop")
}
df %>%
mutate(PID = factor(PID)) %>%
ggplot(aes(x=PID, y = indi_mean,
color = !!sym(gb), fill = !!sym(gb))) +
geom_bar(stat = "identity", position = position_dodge(0.9)) +
scale_color_lancet()+
scale_fill_lancet(alpha = 0.5)+
# stat_pvalue_manual(t_ds, x="PID",y.position = 5,
#                    label = "p = {p}{p.adj.signif}", hide.ns = FALSE,
#                     tip.length = 0, linetype = "blank") +
labs(title = indicator, x = "PID", y = indicator) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
}
indi_box_plot <- function(df_clean, indicator, gb, pair=TRUE, jt=FALSE){
t_ds_group <-
df_clean %>%
filter(Phase %in% c("LEARNING","TrueCHOICE","FalseCHOICE")) %>%
group_by(PID,!!sym(gb)) %>%
summarise(indi_mean=mean(!!sym(indicator), na.rm=TRUE),.groups = "drop") %>%
mutate(PID = factor(PID),
TaskDemand = factor(!!sym(gb))) %>%
t_test(indi_mean~TaskDemand, paired = pair, detailed = TRUE) %>%
add_xy_position(x="TaskDemand") %>%
add_significance()
if("p.adj.signif" %in% colnames(t_ds_group)){
plabel = "p = {p}{p.adj.signif}"
}else{
plabel = "p = {p}{p.signif}"
}
p <- df_clean %>%
filter(Phase %in% c("LEARNING","TrueCHOICE","FalseCHOICE")) %>%
ggplot(aes(x=!!sym(gb), y = !!sym(indicator))) +
geom_boxplot(aes(color = !!sym(gb), fill = !!sym(gb)),
position="identity", outlier.shape = 8) +
scale_color_lancet()+
scale_fill_lancet(alpha = 0.2)+
stat_summary(fun = mean, geom = "point",
shape = 17, color = "black", size = 2) +
stat_pvalue_manual(t_ds_group,
bracket.nudge.y = 0.4,
step.increase = 0.1,
label = plabel, hide.ns = FALSE,
tip.length = 0.01) +
labs(title = indicator, x = gb, y = indicator, fill=gb) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
if(jt==FALSE){
p
}else{
p <- p+geom_jitter(aes(x=!!sym(gb), color=!!sym(gb)),
width=0.3, alpha=0.5)
}
print(p)
}
indi_hist_plot(df_clean, "Task_RT", gb="TaskDemand")
indi_hist_plot(df_clean, "Task_ACC", gb="TaskDemand")
indi_hist_plot(df_clean, "Task_A_measure", gb="TaskDemand")
indi_bar_plot(df_clean,"Task_RT", "TaskDemand")
indi_bar_plot(df_clean,"Task_ACC", "TaskDemand")
indi_bar_plot(df_clean,"Task_A_measure", "TaskDemand")
indi_bar_plot(df_Learning, "Task_RT", "TaskDemand")
indi_bar_plot(df_Learning, "Task_ACC", "TaskDemand")
indi_bar_plot(df_Learning, "Task_A_measure", "TaskDemand")
indi_box_plot(df_True_Choice, "Task_RT", "TaskDemand")
indi_bar_plot(df_False_Choice, "Task_RT", "ChoiceDemand")
indi_bar_plot(df_False_Choice, "Task_ACC", "ChoiceDemand")
indi_bar_plot(df_False_Choice, "Task_A_measure", "ChoiceDemand")
df_dr_means_de <-
df_DemandRating %>%
group_by(PID, DemandLevel) %>%
summarise(DemandRating = mean(DemandRating, na.rm=TRUE),
DemandRating_z = mean(DemandRating_z, na.rm=TRUE),
.groups = "drop") %>%
mutate(DemandLevel=factor(DemandLevel))
t_dr <-
df_dr_means_de %>%
t_test(DemandRating_z ~ DemandLevel, paired = TRUE, detailed = TRUE) %>%
add_xy_position(x = "DemandLevel") %>%
add_significance()
ggplot(data = df_dr_means_de, aes(x = DemandLevel, y = DemandRating_z,
color = DemandLevel)) +
geom_boxplot(width = 0.5, alpha = 0.7) +
geom_jitter() +
stat_boxplot(geom = "errorbar", width = 0.15) +
stat_pvalue_manual(t_dr, step.increase = 0.2, bracket.nudge.y = 0.1,
label = "p = {p}{p.adj.signif}", hide.ns = TRUE) +
scale_color_manual(labels=c("1-Back", "2-Back", "3-Back"),
values = c("#00468BFF", "#42B540FF", "#ED0000FF")) +
scale_x_discrete(labels = c("1-Back", "2-Back", "3-Back")) +
labs(title = "Demand Rating t-test", x = "Task Demand", y = "Demand Rating_z",
color = "Demand Level") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
df_dr_means_de_trans <-
df_dr_means_de %>%
select(-DemandRating) %>%
pivot_wider(values_from = DemandRating_z,
names_from = DemandLevel, names_prefix = "DemandRating_z_") %>%
mutate(DR_z_diff_2_1 = DemandRating_z_2 - DemandRating_z_1,
DR_z_diff_3_1 = DemandRating_z_3 - DemandRating_z_1,
DR_z_diff_3_2 = DemandRating_z_3 - DemandRating_z_2) %>%
pivot_longer(cols=c("DR_z_diff_2_1","DR_z_diff_3_1","DR_z_diff_3_2"),
names_to="Levels", values_to="DR_z_diff",
names_prefix = "DR_z_diff_") %>%
mutate(Type_diff = ifelse(DR_z_diff>0, "harder", "easier"))
df_dr_means_de_trans %>%
ggplot(aes(x=Levels, y=DR_z_diff))+
# df_dr_means_de_trans %>%
#   ggplot(aes(x=Levels, y=DR_z_diff,color=Type_diff,label=PID))+
geom_boxplot(aes(fill=Levels),
outlier.shape = 17, alpha=0.3, width=0.4)+
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"))+
geom_jitter(aes(color=Type_diff),alpha=0.5, width=0.2)+
# geom_label_repel(aes(color=Type_diff),
#                  max.overlaps = nrow(df_dr_means_de_trans)) +
scale_color_lancet()+
geom_hline(yintercept = 0)+
labs(title = "Demand Rating Diff between Levels")+
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
indi_means_comp <- function(df_clean, indicator, gbg, gbd){
df <-
df_clean %>%
group_by_at(gbg) %>%
summarise_at(indicator, mean, na.rm=TRUE, .groups = "drop")
colnames(df)[-c(1,2)] <- paste0(colnames(df)[-c(1,2)], "_diff")
# print(df)
df_easy <-
df %>%
filter(!!sym(gbd)=="Easy") %>%
select(-!!sym(gbd))
df_hard <-
df %>%
filter(!!sym(gbd)=="Hard") %>%
select(-!!sym(gbd))
df_diff <-
df_hard - df_easy
df_diff$PID <- unique(df$PID)
return(df_diff)
}
df_on_phy_diffs <- indi_means_comp(df_Learning,
c("cue_i_on_zyg_zvalues",
"cue_i_on_cor_zvalues",
"cue_i_on_scr_zvalues",
"cue_e_on_zyg_zvalues",
"cue_e_on_cor_zvalues",
"cue_e_on_scr_zvalues"),
c("PID", "TaskDemand"),
"TaskDemand")
